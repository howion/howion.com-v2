---
import { randomId } from "#/utils/math";

export interface Props {
    text: string;
    speed?: number;
    class?: Classname;
    style?: Style;
}

const { text, speed, class: classname, style } = Astro.props;

const tickerId = randomId();
const h = 56;
const seperator = "    â€¢    ";
---

<canvas
    id={tickerId}
    class:list={["section-ticker", classname]}
    style={style}
    height={h}></canvas>

<script define:vars={{ tickerId, text, speed: speed ?? 1, h, seperator }}>
    const canvas = document.getElementById(tickerId);
    const ctx = canvas.getContext("2d");
    ctx.canvas.width = window.innerWidth;
    ctx.canvas.height = h;

    const separator = seperator;

    let bufferCanvas, bufferCtx, textWidth;
    let offset = 0;

    let scrollVelocity = 0;
    let lastScrollY = window.scrollY;
    let lastTimestamp = performance.now();

    function renderBuffer() {
        const repeatedText = (text + separator).repeat(100);
        textWidth = ctx.measureText(repeatedText).width;

        bufferCanvas = document.createElement("canvas");
        bufferCanvas.width = textWidth;
        bufferCanvas.height = canvas.height;

        bufferCtx = bufferCanvas.getContext("2d");
        bufferCtx.font = "500 18px sans-serif";
        bufferCtx.fillStyle = "#FFFFE3";
        bufferCtx.textBaseline = "middle";
        bufferCtx.clearRect(0, 0, bufferCanvas.width, bufferCanvas.height);
        bufferCtx.fillText(repeatedText, 0, bufferCanvas.height / 2);
    }

    function resizeCanvas() {
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        renderBuffer();
    }

    window.addEventListener("resize", () => {
        resizeCanvas();
    });

    resizeCanvas();

    // // Scroll speed tracking
    // function updateScrollVelocity() {
    //     const now = performance.now();
    //     const deltaY = window.scrollY - lastScrollY;
    //     const dt = now - lastTimestamp;

    //     if (dt > 0) {
    //         const velocity = deltaY / dt; // px/ms
    //         scrollVelocity = Math.round(velocity * 10); // scale up
    //     }

    //     lastScrollY = window.scrollY;
    //     lastTimestamp = now;
    // }

    // window.addEventListener("scroll", updateScrollVelocity);

    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(bufferCanvas, -offset, 0);

        // offset += scrollVelocity !== 0 ? scrollVelocity : speed;
        offset += speed;

        if (offset >= textWidth - canvas.width) {
            offset = textWidth / 2;
        }
        requestAnimationFrame(draw);

        // // Apply exponential decay to scroll effect
        // scrollVelocity = scrollVelocity * 0.925;

        // if (Math.abs(scrollVelocity) < 0.1) {
        //     scrollVelocity = 0;
        // }
    }

    draw();
</script>
