---
import { randomId } from "#/utils/math";

export interface Props {
    text: string;
    speed?: number;
    class?: Classname;
    style?: Style;
}

const { text, speed, class: classname, style } = Astro.props;

const tickerId = randomId();
const h = 56;
const separator = "    â€¢    ";
---

<canvas
    id={tickerId}
    class:list={["section-ticker", classname]}
    style={style}
    height={h}></canvas>

<script define:vars={{ tickerId, text, speed: speed ?? 1, h, separator }}>
    const canvas = document.getElementById(tickerId);
    const ctx = canvas.getContext("2d");
    ctx.canvas.width = window.innerWidth;
    ctx.canvas.height = h;

    let bufferCanvas, bufferCtx, textWidth;
    let offset = 0;

    let fontSize = 18;

    function renderBuffer() {
        if (canvas.width < 468) {
            fontSize = 14;
        } else if (canvas.width < 1268) {
            fontSize = 16;
        } else {
            fontSize = 18;
        }

        const repeatedText = (text + separator).repeat(100);
        textWidth = ctx.measureText(repeatedText).width;

        bufferCanvas = document.createElement("canvas");
        bufferCanvas.width = textWidth;
        bufferCanvas.height = canvas.height;

        bufferCtx = bufferCanvas.getContext("2d");
        bufferCtx.font = `500 ${fontSize}px "Overused Grotesk"`;
        bufferCtx.fillStyle = "#FFFFE3";
        bufferCtx.textBaseline = "middle";
        bufferCtx.clearRect(0, 0, bufferCanvas.width, bufferCanvas.height);
        bufferCtx.fillText(repeatedText, 0, bufferCanvas.height / 2);
    }

    function resizeCanvas() {
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        renderBuffer();
    }

    window.addEventListener("resize", () => {
        resizeCanvas();
    });

    resizeCanvas();

    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(bufferCanvas, -offset, 0);

        // offset += scrollVelocity !== 0 ? scrollVelocity : speed;
        offset += speed;

        if (offset >= textWidth - canvas.width) {
            offset = textWidth / 2;
        }

        requestAnimationFrame(draw);
    }

    draw();
</script>
