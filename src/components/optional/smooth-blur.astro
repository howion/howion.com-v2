---
/** biome-ignore-all lint/style/useExponentiationOperator: <explanation> */

export interface Props {
    position: "top" | "bottom";
    direction: "top" | "bottom";

    id?: string;
    class?: Classname;

    /**
     * @default 1
     */
    intensity?: number;

    /**
     * @default 5
     */
    divCount?: number;
}

const CURVE_FUNCTION = (p: number) => p * p * (3 - 2 * p);
const DIV_COUNT = Astro.props.divCount ?? 10;

const divs = [];
const increment = 100 / DIV_COUNT;
const intensity = Astro.props.intensity ?? 2;

for (let i = 0; i < DIV_COUNT; i++) {
    const value = CURVE_FUNCTION(i / DIV_COUNT);
    const blur = Math.pow(2, value * 4) * 0.625 * intensity;

    const p1 = Math.round((increment * i - increment) * 10) / 10;
    const p2 = Math.round(increment * i * 10) / 10;
    const p3 = Math.round((increment * i + increment) * 10) / 10;
    const p4 = Math.round((increment * i + increment * 2) * 10) / 10;

    let gradient = `transparent ${p1}%, black ${p2}%`;
    if (p3 <= 100) gradient += `, black ${p3}%`;
    if (p4 <= 100) gradient += `, transparent ${p4}%`;

    const direction = `to ${Astro.props.direction}`;

    divs.push({
        style: `mask-image:linear-gradient(${direction}, ${gradient});backdrop-filter:blur(${blur.toFixed(3)}px)`,
    });
}
---

<div
    class:list={[
        "smoothblur-container",
        `is-${Astro.props.position}`,
        Astro.props.class,
    ]}
    id={Astro.props.id}
>
    <div class="smoothblur-inner">
        {divs.map((d) => <div class="smoothblur" style={d.style} />)}
    </div>
</div>

<style>
    .smoothblur {
        &-container {
            position: absolute;
            left: 0;
            width: 100%;
            height: 10vh;
            pointer-events: none;
            z-index: 9999;
            isolation: isolate;
            background-color: transparent;
            overflow: hidden;

            &.is-top {
                top: 0;
            }

            &.is-bottom {
                bottom: 0;
            }
        }

        &-inner {
            position: relative;
            width: 100%;
            height: 100%;
            background-color: transparent;
        }

        position: absolute;
        inset: 0px;
        opacity: 1px;
        mask: linear-gradient(black, black, transparent);
        backdrop-filter: blur(8px);
        background-color: transparent;
    }
</style>
